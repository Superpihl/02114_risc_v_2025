circuit connection :
  module memory :
    input clock : Clock
    input reset : Reset
    output io : { flip Addr : UInt<32>, flip DataIn : UInt<32>, flip Length : UInt<2>, flip rd : UInt<5>, flip memWr : UInt<1>, flip sign : UInt<1>, DataOut : UInt<32>, hex : UInt<16>}

    smem DataMemory : UInt<8> [256] @[memory.scala 21:31]
    wire tempOut : UInt<8>[4] @[memory.scala 23:24]
    tempOut[0] <= UInt<8>("h0") @[memory.scala 23:24]
    tempOut[1] <= UInt<8>("h0") @[memory.scala 23:24]
    tempOut[2] <= UInt<8>("h0") @[memory.scala 23:24]
    tempOut[3] <= UInt<8>("h0") @[memory.scala 23:24]
    wire tempSeg : UInt<8>[2] @[memory.scala 24:24]
    tempSeg[0] <= UInt<8>("h75") @[memory.scala 24:24]
    tempSeg[1] <= UInt<8>("h75") @[memory.scala 24:24]
    node _T = lt(UInt<1>("h0"), io.Length) @[memory.scala 26:12]
    when _T : @[memory.scala 26:24]
      when io.memWr : @[memory.scala 27:19]
        node _T_1 = eq(io.Addr, UInt<9>("h100")) @[memory.scala 28:20]
        when _T_1 : @[memory.scala 28:34]
          node _tempSeg_0_T = bits(io.DataIn, 7, 0) @[memory.scala 29:32]
          tempSeg[0] <= _tempSeg_0_T @[memory.scala 29:20]
          node _T_2 = asUInt(reset) @[memory.scala 30:15]
          node _T_3 = eq(_T_2, UInt<1>("h0")) @[memory.scala 30:15]
          when _T_3 : @[memory.scala 30:15]
            printf(clock, UInt<1>("h1"), "tempSeg(0) = %x\n", tempSeg[0]) : printf @[memory.scala 30:15]
        else :
          node _T_4 = eq(io.Addr, UInt<9>("h101")) @[memory.scala 31:28]
          when _T_4 : @[memory.scala 31:46]
            node _tempSeg_1_T = bits(io.DataIn, 7, 0) @[memory.scala 32:32]
            tempSeg[1] <= _tempSeg_1_T @[memory.scala 32:20]
            node _T_5 = asUInt(reset) @[memory.scala 33:15]
            node _T_6 = eq(_T_5, UInt<1>("h0")) @[memory.scala 33:15]
            when _T_6 : @[memory.scala 33:15]
              printf(clock, UInt<1>("h1"), "tempSeg(1) = %x\n", tempSeg[1]) : printf_1 @[memory.scala 33:15]
          else :
            node _T_7 = bits(io.Addr, 7, 0) @[memory.scala 35:19]
            infer mport MPORT = DataMemory[_T_7], clock @[memory.scala 35:19]
            node _T_8 = bits(io.DataIn, 7, 0) @[memory.scala 35:41]
            MPORT <= _T_8 @[memory.scala 35:29]
      else :
        node _tempOut_0_T = bits(io.Addr, 7, 0) @[memory.scala 39:31]
        infer mport tempOut_0_MPORT = DataMemory[_tempOut_0_T], clock @[memory.scala 39:31]
        tempOut[0] <= tempOut_0_MPORT @[memory.scala 39:18]
    node _T_9 = lt(UInt<1>("h1"), io.Length) @[memory.scala 43:12]
    when _T_9 : @[memory.scala 43:24]
      when io.memWr : @[memory.scala 44:19]
        node _T_10 = add(io.Addr, UInt<1>("h1")) @[memory.scala 45:20]
        node _T_11 = tail(_T_10, 1) @[memory.scala 45:20]
        node _T_12 = eq(_T_11, UInt<9>("h100")) @[memory.scala 45:26]
        when _T_12 : @[memory.scala 45:40]
          node _tempSeg_0_T_1 = bits(io.DataIn, 15, 8) @[memory.scala 46:32]
          tempSeg[0] <= _tempSeg_0_T_1 @[memory.scala 46:20]
          node _T_13 = asUInt(reset) @[memory.scala 47:15]
          node _T_14 = eq(_T_13, UInt<1>("h0")) @[memory.scala 47:15]
          when _T_14 : @[memory.scala 47:15]
            printf(clock, UInt<1>("h1"), "tempSeg(0) = %x\n", tempSeg[0]) : printf_2 @[memory.scala 47:15]
        else :
          node _T_15 = add(io.Addr, UInt<2>("h2")) @[memory.scala 48:26]
          node _T_16 = tail(_T_15, 1) @[memory.scala 48:26]
          node _T_17 = eq(_T_16, UInt<9>("h100")) @[memory.scala 48:32]
          when _T_17 : @[memory.scala 48:46]
            node _tempSeg_1_T_1 = bits(io.DataIn, 15, 8) @[memory.scala 49:32]
            tempSeg[1] <= _tempSeg_1_T_1 @[memory.scala 49:20]
            node _T_18 = asUInt(reset) @[memory.scala 50:15]
            node _T_19 = eq(_T_18, UInt<1>("h0")) @[memory.scala 50:15]
            when _T_19 : @[memory.scala 50:15]
              printf(clock, UInt<1>("h1"), "tempSeg(1) = %x\n", tempSeg[1]) : printf_3 @[memory.scala 50:15]
          else :
            node _T_20 = add(io.Addr, UInt<1>("h1")) @[memory.scala 52:27]
            node _T_21 = tail(_T_20, 1) @[memory.scala 52:27]
            node _T_22 = bits(_T_21, 7, 0) @[memory.scala 52:19]
            infer mport MPORT_1 = DataMemory[_T_22], clock @[memory.scala 52:19]
            node _T_23 = bits(io.DataIn, 15, 8) @[memory.scala 52:45]
            MPORT_1 <= _T_23 @[memory.scala 52:33]
      else :
        node _tempOut_1_T = add(io.Addr, UInt<1>("h1")) @[memory.scala 55:39]
        node _tempOut_1_T_1 = tail(_tempOut_1_T, 1) @[memory.scala 55:39]
        node _tempOut_1_T_2 = bits(_tempOut_1_T_1, 7, 0) @[memory.scala 55:31]
        infer mport tempOut_1_MPORT = DataMemory[_tempOut_1_T_2], clock @[memory.scala 55:31]
        tempOut[1] <= tempOut_1_MPORT @[memory.scala 55:18]
    node _T_24 = lt(UInt<2>("h2"), io.Length) @[memory.scala 58:12]
    when _T_24 : @[memory.scala 58:24]
      when io.memWr : @[memory.scala 59:19]
        node _T_25 = add(io.Addr, UInt<2>("h2")) @[memory.scala 60:20]
        node _T_26 = tail(_T_25, 1) @[memory.scala 60:20]
        node _T_27 = eq(_T_26, UInt<9>("h100")) @[memory.scala 60:26]
        when _T_27 : @[memory.scala 60:40]
          node _tempSeg_0_T_2 = bits(io.DataIn, 23, 16) @[memory.scala 61:32]
          tempSeg[0] <= _tempSeg_0_T_2 @[memory.scala 61:20]
          node _tempSeg_1_T_2 = bits(io.DataIn, 31, 24) @[memory.scala 62:32]
          tempSeg[1] <= _tempSeg_1_T_2 @[memory.scala 62:20]
          node _T_28 = cat(tempSeg[1], tempSeg[0]) @[memory.scala 63:44]
          node _T_29 = asUInt(reset) @[memory.scala 63:15]
          node _T_30 = eq(_T_29, UInt<1>("h0")) @[memory.scala 63:15]
          when _T_30 : @[memory.scala 63:15]
            printf(clock, UInt<1>("h1"), "tempSeg = %x\n", _T_28) : printf_4 @[memory.scala 63:15]
        else :
          node _T_31 = add(io.Addr, UInt<2>("h2")) @[memory.scala 65:27]
          node _T_32 = tail(_T_31, 1) @[memory.scala 65:27]
          node _T_33 = bits(_T_32, 7, 0) @[memory.scala 65:19]
          infer mport MPORT_2 = DataMemory[_T_33], clock @[memory.scala 65:19]
          node _T_34 = bits(io.DataIn, 23, 16) @[memory.scala 65:45]
          MPORT_2 <= _T_34 @[memory.scala 65:33]
          node _T_35 = add(io.Addr, UInt<2>("h3")) @[memory.scala 66:27]
          node _T_36 = tail(_T_35, 1) @[memory.scala 66:27]
          node _T_37 = bits(_T_36, 7, 0) @[memory.scala 66:19]
          infer mport MPORT_3 = DataMemory[_T_37], clock @[memory.scala 66:19]
          node _T_38 = bits(io.DataIn, 31, 24) @[memory.scala 66:45]
          MPORT_3 <= _T_38 @[memory.scala 66:33]
      else :
        node _tempOut_2_T = add(io.Addr, UInt<2>("h2")) @[memory.scala 69:39]
        node _tempOut_2_T_1 = tail(_tempOut_2_T, 1) @[memory.scala 69:39]
        node _tempOut_2_T_2 = bits(_tempOut_2_T_1, 7, 0) @[memory.scala 69:31]
        infer mport tempOut_2_MPORT = DataMemory[_tempOut_2_T_2], clock @[memory.scala 69:31]
        tempOut[2] <= tempOut_2_MPORT @[memory.scala 69:18]
        node _tempOut_3_T = add(io.Addr, UInt<2>("h3")) @[memory.scala 70:39]
        node _tempOut_3_T_1 = tail(_tempOut_3_T, 1) @[memory.scala 70:39]
        node _tempOut_3_T_2 = bits(_tempOut_3_T_1, 7, 0) @[memory.scala 70:31]
        infer mport tempOut_3_MPORT = DataMemory[_tempOut_3_T_2], clock @[memory.scala 70:31]
        tempOut[3] <= tempOut_3_MPORT @[memory.scala 70:18]
    node _io_hex_T = cat(tempSeg[1], tempSeg[0]) @[memory.scala 74:24]
    io.hex <= _io_hex_T @[memory.scala 74:10]
    node _T_39 = eq(io.Length, UInt<1>("h1")) @[memory.scala 76:18]
    node _T_40 = eq(io.sign, UInt<1>("h0")) @[memory.scala 76:29]
    node _T_41 = and(_T_39, _T_40) @[memory.scala 76:26]
    node _T_42 = and(tempOut[0], UInt<8>("h80")) @[memory.scala 76:53]
    node _T_43 = eq(_T_42, UInt<8>("h80")) @[memory.scala 76:63]
    node _T_44 = and(_T_41, _T_43) @[memory.scala 76:38]
    when _T_44 : @[memory.scala 76:74]
      node _io_DataOut_T = cat(UInt<24>("hffffff"), tempOut[0]) @[memory.scala 77:30]
      io.DataOut <= _io_DataOut_T @[memory.scala 77:16]
    else :
      node _T_45 = eq(io.Length, UInt<2>("h2")) @[memory.scala 78:24]
      node _T_46 = eq(io.sign, UInt<1>("h0")) @[memory.scala 78:35]
      node _T_47 = and(_T_45, _T_46) @[memory.scala 78:32]
      node _T_48 = and(tempOut[1], UInt<8>("h80")) @[memory.scala 78:59]
      node _T_49 = eq(_T_48, UInt<8>("h80")) @[memory.scala 78:69]
      node _T_50 = and(_T_47, _T_49) @[memory.scala 78:44]
      when _T_50 : @[memory.scala 78:80]
        node _io_DataOut_T_1 = cat(UInt<16>("hffff"), tempOut[1]) @[memory.scala 79:28]
        node _io_DataOut_T_2 = cat(_io_DataOut_T_1, tempOut[0]) @[memory.scala 79:42]
        io.DataOut <= _io_DataOut_T_2 @[memory.scala 79:16]
      else :
        node _io_DataOut_T_3 = cat(tempOut[3], tempOut[2]) @[memory.scala 81:30]
        node _io_DataOut_T_4 = cat(_io_DataOut_T_3, tempOut[1]) @[memory.scala 81:44]
        node _io_DataOut_T_5 = cat(_io_DataOut_T_4, tempOut[0]) @[memory.scala 81:58]
        io.DataOut <= _io_DataOut_T_5 @[memory.scala 81:16]


  module decode :
    input clock : Clock
    input reset : Reset
    output io : { flip instr : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, func3 : UInt<3>, func10 : UInt<10>, imm : UInt<12>, imm20 : UInt<20>}

    io.rs1 <= UInt<1>("h0") @[decode.scala 19:10]
    io.rs2 <= UInt<1>("h0") @[decode.scala 20:10]
    io.rd <= UInt<1>("h0") @[decode.scala 21:9]
    io.func3 <= UInt<1>("h0") @[decode.scala 22:12]
    io.func10 <= UInt<1>("h0") @[decode.scala 23:13]
    io.imm <= UInt<1>("h0") @[decode.scala 24:10]
    io.imm20 <= UInt<1>("h0") @[decode.scala 25:12]
    node opcode = bits(io.instr, 6, 0) @[decode.scala 29:24]
    node _T = eq(UInt<2>("h3"), opcode) @[decode.scala 31:18]
    when _T : @[decode.scala 31:18]
      node _io_rd_T = bits(io.instr, 11, 7) @[decode.scala 33:24]
      io.rd <= _io_rd_T @[decode.scala 33:13]
      node _io_func3_T = bits(io.instr, 14, 12) @[decode.scala 34:27]
      io.func3 <= _io_func3_T @[decode.scala 34:16]
      node _io_rs1_T = bits(io.instr, 19, 15) @[decode.scala 35:25]
      io.rs1 <= _io_rs1_T @[decode.scala 35:14]
      node _io_imm_T = bits(io.instr, 31, 20) @[decode.scala 36:25]
      io.imm <= _io_imm_T @[decode.scala 36:14]
    else :
      node _T_1 = eq(UInt<5>("h13"), opcode) @[decode.scala 31:18]
      when _T_1 : @[decode.scala 31:18]
        node _io_rd_T_1 = bits(io.instr, 11, 7) @[decode.scala 40:24]
        io.rd <= _io_rd_T_1 @[decode.scala 40:13]
        node _io_func3_T_1 = bits(io.instr, 14, 12) @[decode.scala 41:27]
        io.func3 <= _io_func3_T_1 @[decode.scala 41:16]
        node _io_rs1_T_1 = bits(io.instr, 19, 15) @[decode.scala 42:25]
        io.rs1 <= _io_rs1_T_1 @[decode.scala 42:14]
        node _io_imm_T_1 = bits(io.instr, 31, 20) @[decode.scala 43:25]
        io.imm <= _io_imm_T_1 @[decode.scala 43:14]
      else :
        node _T_2 = eq(UInt<5>("h17"), opcode) @[decode.scala 31:18]
        when _T_2 : @[decode.scala 31:18]
          node _io_rd_T_2 = bits(io.instr, 11, 7) @[decode.scala 46:24]
          io.rd <= _io_rd_T_2 @[decode.scala 46:13]
          node _io_imm20_T = bits(io.instr, 31, 12) @[decode.scala 47:27]
          io.imm20 <= _io_imm20_T @[decode.scala 47:16]
        else :
          node _T_3 = eq(UInt<6>("h23"), opcode) @[decode.scala 31:18]
          when _T_3 : @[decode.scala 31:18]
            node _io_func3_T_2 = bits(io.instr, 14, 12) @[decode.scala 50:27]
            io.func3 <= _io_func3_T_2 @[decode.scala 50:16]
            node _io_rs1_T_2 = bits(io.instr, 19, 15) @[decode.scala 51:25]
            io.rs1 <= _io_rs1_T_2 @[decode.scala 51:14]
            node _io_rs2_T = bits(io.instr, 24, 20) @[decode.scala 52:25]
            io.rs2 <= _io_rs2_T @[decode.scala 52:14]
            node _io_imm_T_2 = bits(io.instr, 31, 25) @[decode.scala 53:25]
            node _io_imm_T_3 = bits(io.instr, 11, 7) @[decode.scala 53:44]
            node _io_imm_T_4 = cat(_io_imm_T_2, _io_imm_T_3) @[decode.scala 53:33]
            io.imm <= _io_imm_T_4 @[decode.scala 53:14]
          else :
            node _T_4 = eq(UInt<7>("h6f"), opcode) @[decode.scala 31:18]
            when _T_4 : @[decode.scala 31:18]
              node _io_rd_T_3 = bits(io.instr, 11, 7) @[decode.scala 58:24]
              io.rd <= _io_rd_T_3 @[decode.scala 58:13]
              node _io_imm_T_5 = bits(io.instr, 31, 31) @[decode.scala 59:25]
              node _io_imm_T_6 = bits(io.instr, 19, 12) @[decode.scala 59:41]
              node _io_imm_T_7 = cat(_io_imm_T_5, _io_imm_T_6) @[decode.scala 59:30]
              node _io_imm_T_8 = bits(io.instr, 20, 20) @[decode.scala 59:60]
              node _io_imm_T_9 = cat(_io_imm_T_7, _io_imm_T_8) @[decode.scala 59:49]
              node _io_imm_T_10 = bits(io.instr, 30, 21) @[decode.scala 59:76]
              node _io_imm_T_11 = cat(_io_imm_T_9, _io_imm_T_10) @[decode.scala 59:65]
              node _io_imm_T_12 = cat(_io_imm_T_11, UInt<1>("h0")) @[decode.scala 59:84]
              io.imm <= _io_imm_T_12 @[decode.scala 59:14]
            else :
              node _T_5 = eq(UInt<6>("h33"), opcode) @[decode.scala 31:18]
              when _T_5 : @[decode.scala 31:18]
                node _io_rd_T_4 = bits(io.instr, 11, 7) @[decode.scala 62:24]
                io.rd <= _io_rd_T_4 @[decode.scala 62:13]
                node _io_func10_T = bits(io.instr, 14, 12) @[decode.scala 63:28]
                node _io_func10_T_1 = bits(io.instr, 31, 25) @[decode.scala 63:47]
                node _io_func10_T_2 = cat(_io_func10_T, _io_func10_T_1) @[decode.scala 63:36]
                io.func10 <= _io_func10_T_2 @[decode.scala 63:17]
                node _io_rs1_T_3 = bits(io.instr, 19, 15) @[decode.scala 64:25]
                io.rs1 <= _io_rs1_T_3 @[decode.scala 64:14]
                node _io_rs2_T_1 = bits(io.instr, 24, 20) @[decode.scala 65:25]
                io.rs2 <= _io_rs2_T_1 @[decode.scala 65:14]
              else :
                node _T_6 = eq(UInt<6>("h37"), opcode) @[decode.scala 31:18]
                when _T_6 : @[decode.scala 31:18]
                  node _io_rd_T_5 = bits(io.instr, 11, 7) @[decode.scala 69:24]
                  io.rd <= _io_rd_T_5 @[decode.scala 69:13]
                  node _io_imm20_T_1 = bits(io.instr, 31, 12) @[decode.scala 70:27]
                  io.imm20 <= _io_imm20_T_1 @[decode.scala 70:16]
                else :
                  node _T_7 = eq(UInt<7>("h63"), opcode) @[decode.scala 31:18]
                  when _T_7 : @[decode.scala 31:18]
                    node _io_func3_T_3 = bits(io.instr, 14, 12) @[decode.scala 73:27]
                    io.func3 <= _io_func3_T_3 @[decode.scala 73:16]
                    node _io_rs1_T_4 = bits(io.instr, 19, 15) @[decode.scala 74:25]
                    io.rs1 <= _io_rs1_T_4 @[decode.scala 74:14]
                    node _io_rs2_T_2 = bits(io.instr, 24, 20) @[decode.scala 75:25]
                    io.rs2 <= _io_rs2_T_2 @[decode.scala 75:14]
                    node _temp_T = bits(io.instr, 31, 31) @[decode.scala 76:27]
                    node _temp_T_1 = bits(io.instr, 7, 7) @[decode.scala 76:43]
                    node _temp_T_2 = cat(_temp_T, _temp_T_1) @[decode.scala 76:32]
                    node _temp_T_3 = bits(io.instr, 30, 25) @[decode.scala 76:58]
                    node _temp_T_4 = cat(_temp_T_2, _temp_T_3) @[decode.scala 76:47]
                    node _temp_T_5 = bits(io.instr, 11, 8) @[decode.scala 76:77]
                    node _temp_T_6 = cat(_temp_T_4, _temp_T_5) @[decode.scala 76:66]
                    node temp = cat(_temp_T_6, UInt<1>("h0")) @[decode.scala 76:84]
                    node _io_imm_T_13 = bits(temp, 11, 0) @[decode.scala 77:21]
                    io.imm <= _io_imm_T_13 @[decode.scala 77:14]
                  else :
                    node _T_8 = eq(UInt<7>("h67"), opcode) @[decode.scala 31:18]
                    when _T_8 : @[decode.scala 31:18]
                      node _io_rd_T_6 = bits(io.instr, 11, 7) @[decode.scala 81:24]
                      io.rd <= _io_rd_T_6 @[decode.scala 81:13]
                      node _io_func3_T_4 = bits(io.instr, 14, 12) @[decode.scala 82:27]
                      io.func3 <= _io_func3_T_4 @[decode.scala 82:16]
                      node _io_rs1_T_5 = bits(io.instr, 19, 15) @[decode.scala 83:25]
                      io.rs1 <= _io_rs1_T_5 @[decode.scala 83:14]
                      node _io_imm_T_14 = bits(io.instr, 31, 20) @[decode.scala 84:25]
                      io.imm <= _io_imm_T_14 @[decode.scala 84:14]


  module execution :
    input clock : Clock
    input reset : Reset
    output io : { flip opcode : UInt<7>, flip rs1 : UInt<32>, flip rs2 : UInt<32>, flip rd : UInt<32>, flip func3 : UInt<3>, flip func10 : UInt<10>, flip imm : UInt<12>, flip imm20 : UInt<20>, flip pc : UInt<32>, res : UInt<32>, branch : UInt<1>, memLen : UInt<2>, sign : UInt<1>}

    io.res <= UInt<1>("h0") @[execution.scala 127:10]
    io.branch <= UInt<1>("h0") @[execution.scala 128:13]
    io.memLen <= UInt<1>("h0") @[execution.scala 129:13]
    io.sign <= UInt<1>("h0") @[execution.scala 130:11]
    node _T = eq(UInt<2>("h3"), io.opcode) @[execution.scala 131:21]
    when _T : @[execution.scala 131:21]
      node _io_res_T = add(io.rs1, io.imm) @[execution.scala 133:24]
      node _io_res_T_1 = tail(_io_res_T, 1) @[execution.scala 133:24]
      io.res <= _io_res_T_1 @[execution.scala 133:14]
      node _T_1 = eq(UInt<1>("h0"), io.func3) @[execution.scala 134:23]
      when _T_1 : @[execution.scala 134:23]
        io.memLen <= UInt<1>("h1") @[execution.scala 136:21]
      else :
        node _T_2 = eq(UInt<1>("h1"), io.func3) @[execution.scala 134:23]
        when _T_2 : @[execution.scala 134:23]
          io.memLen <= UInt<2>("h2") @[execution.scala 139:21]
        else :
          node _T_3 = eq(UInt<2>("h2"), io.func3) @[execution.scala 134:23]
          when _T_3 : @[execution.scala 134:23]
            io.memLen <= UInt<2>("h3") @[execution.scala 142:21]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.func3) @[execution.scala 134:23]
            when _T_4 : @[execution.scala 134:23]
              io.memLen <= UInt<1>("h1") @[execution.scala 145:21]
              io.sign <= UInt<1>("h1") @[execution.scala 146:19]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.func3) @[execution.scala 134:23]
              when _T_5 : @[execution.scala 134:23]
                io.memLen <= UInt<2>("h2") @[execution.scala 149:21]
                io.sign <= UInt<1>("h1") @[execution.scala 150:19]
    else :
      node _T_6 = eq(UInt<5>("h13"), io.opcode) @[execution.scala 131:21]
      when _T_6 : @[execution.scala 131:21]
        wire io_res_res : UInt<32> @[execution.scala 64:19]
        io_res_res <= UInt<1>("h0") @[execution.scala 65:9]
        node _io_res_T_2 = eq(UInt<1>("h0"), io.func3) @[execution.scala 66:19]
        when _io_res_T_2 : @[execution.scala 66:19]
          node _io_res_res_T = asSInt(io.rs1) @[execution.scala 68:21]
          node _io_res_res_T_1 = asSInt(io.imm) @[execution.scala 68:34]
          node _io_res_res_T_2 = add(_io_res_res_T, _io_res_res_T_1) @[execution.scala 68:28]
          node _io_res_res_T_3 = tail(_io_res_res_T_2, 1) @[execution.scala 68:28]
          node _io_res_res_T_4 = asSInt(_io_res_res_T_3) @[execution.scala 68:28]
          node _io_res_res_T_5 = asUInt(_io_res_res_T_4) @[execution.scala 68:42]
          io_res_res <= _io_res_res_T_5 @[execution.scala 68:13]
        else :
          node _io_res_T_3 = eq(UInt<2>("h2"), io.func3) @[execution.scala 66:19]
          when _io_res_T_3 : @[execution.scala 66:19]
            node _io_res_res_T_6 = asSInt(io.rs1) @[execution.scala 72:21]
            node _io_res_res_T_7 = asSInt(io.imm) @[execution.scala 72:34]
            node _io_res_res_T_8 = lt(_io_res_res_T_6, _io_res_res_T_7) @[execution.scala 72:28]
            io_res_res <= _io_res_res_T_8 @[execution.scala 72:13]
          else :
            node _io_res_T_4 = eq(UInt<2>("h3"), io.func3) @[execution.scala 66:19]
            when _io_res_T_4 : @[execution.scala 66:19]
              node _io_res_res_T_9 = lt(io.rs1, io.imm) @[execution.scala 75:21]
              io_res_res <= _io_res_res_T_9 @[execution.scala 75:13]
            else :
              node _io_res_T_5 = eq(UInt<3>("h4"), io.func3) @[execution.scala 66:19]
              when _io_res_T_5 : @[execution.scala 66:19]
                node _io_res_res_T_10 = xor(io.rs1, io.imm) @[execution.scala 78:20]
                io_res_res <= _io_res_res_T_10 @[execution.scala 78:13]
              else :
                node _io_res_T_6 = eq(UInt<3>("h6"), io.func3) @[execution.scala 66:19]
                when _io_res_T_6 : @[execution.scala 66:19]
                  node _io_res_res_T_11 = or(io.rs1, io.imm) @[execution.scala 81:20]
                  io_res_res <= _io_res_res_T_11 @[execution.scala 81:13]
                else :
                  node _io_res_T_7 = eq(UInt<3>("h7"), io.func3) @[execution.scala 66:19]
                  when _io_res_T_7 : @[execution.scala 66:19]
                    node _io_res_res_T_12 = and(io.rs1, io.imm) @[execution.scala 84:20]
                    io_res_res <= _io_res_res_T_12 @[execution.scala 84:13]
                  else :
                    node _io_res_T_8 = eq(UInt<1>("h1"), io.func3) @[execution.scala 66:19]
                    when _io_res_T_8 : @[execution.scala 66:19]
                      node _io_res_res_T_13 = bits(io.imm, 4, 0) @[execution.scala 87:26]
                      node _io_res_res_T_14 = dshl(io.rs1, _io_res_res_T_13) @[execution.scala 87:20]
                      io_res_res <= _io_res_res_T_14 @[execution.scala 87:13]
                    else :
                      node _io_res_T_9 = eq(UInt<3>("h5"), io.func3) @[execution.scala 66:19]
                      when _io_res_T_9 : @[execution.scala 66:19]
                        node _io_res_T_10 = bits(io.imm, 10, 10) @[execution.scala 90:17]
                        node _io_res_T_11 = eq(_io_res_T_10, UInt<1>("h1")) @[execution.scala 90:22]
                        when _io_res_T_11 : @[execution.scala 90:31]
                          node _io_res_T_12 = asSInt(io.rs1) @[execution.scala 91:16]
                          node _io_res_T_13 = bits(io.imm, 4, 0) @[execution.scala 91:29]
                          node _io_res_T_14 = dshr(_io_res_T_12, _io_res_T_13) @[execution.scala 91:23]
                          node _io_res_T_15 = asUInt(_io_res_T_14) @[execution.scala 91:37]
                        else :
                          node _io_res_T_16 = bits(io.imm, 4, 0) @[execution.scala 93:21]
                          node _io_res_T_17 = dshr(io.rs1, _io_res_T_16) @[execution.scala 93:15]
        io.res <= io_res_res @[execution.scala 155:14]
      else :
        node _T_7 = eq(UInt<5>("h17"), io.opcode) @[execution.scala 131:21]
        when _T_7 : @[execution.scala 131:21]
          node _io_res_T_18 = asSInt(io.pc) @[execution.scala 158:24]
          node _io_res_T_19 = asSInt(io.imm20) @[execution.scala 158:42]
          node _io_res_T_20 = add(_io_res_T_18, _io_res_T_19) @[execution.scala 158:31]
          node _io_res_T_21 = tail(_io_res_T_20, 1) @[execution.scala 158:31]
          node _io_res_T_22 = asSInt(_io_res_T_21) @[execution.scala 158:31]
          node _io_res_T_23 = asUInt(_io_res_T_22) @[execution.scala 158:50]
          io.res <= _io_res_T_23 @[execution.scala 158:14]
          io.branch <= UInt<1>("h1") @[execution.scala 159:17]
        else :
          node _T_8 = eq(UInt<6>("h23"), io.opcode) @[execution.scala 131:21]
          when _T_8 : @[execution.scala 131:21]
            node _T_9 = eq(UInt<1>("h0"), io.func3) @[execution.scala 162:23]
            when _T_9 : @[execution.scala 162:23]
              node _io_res_T_24 = bits(io.rs2, 7, 0) @[execution.scala 164:27]
              io.res <= _io_res_T_24 @[execution.scala 164:18]
              io.memLen <= UInt<1>("h1") @[execution.scala 165:21]
            else :
              node _T_10 = eq(UInt<1>("h1"), io.func3) @[execution.scala 162:23]
              when _T_10 : @[execution.scala 162:23]
                node _io_res_T_25 = bits(io.rs2, 15, 0) @[execution.scala 168:27]
                io.res <= _io_res_T_25 @[execution.scala 168:18]
                io.memLen <= UInt<2>("h2") @[execution.scala 169:21]
              else :
                node _T_11 = eq(UInt<2>("h2"), io.func3) @[execution.scala 162:23]
                when _T_11 : @[execution.scala 162:23]
                  io.res <= io.rs2 @[execution.scala 172:18]
                  io.memLen <= UInt<2>("h3") @[execution.scala 173:21]
          else :
            node _T_12 = eq(UInt<7>("h6f"), io.opcode) @[execution.scala 131:21]
            when _T_12 : @[execution.scala 131:21]
              node _io_res_T_26 = add(io.pc, UInt<3>("h4")) @[execution.scala 179:23]
              node _io_res_T_27 = tail(_io_res_T_26, 1) @[execution.scala 179:23]
              io.res <= _io_res_T_27 @[execution.scala 179:14]
              io.branch <= UInt<1>("h1") @[execution.scala 180:17]
            else :
              node _T_13 = eq(UInt<6>("h33"), io.opcode) @[execution.scala 131:21]
              when _T_13 : @[execution.scala 131:21]
                wire io_res_res_1 : UInt<32> @[execution.scala 24:19]
                io_res_res_1 <= UInt<1>("h0") @[execution.scala 25:9]
                node _io_res_T_28 = eq(UInt<1>("h0"), io.func10) @[execution.scala 27:20]
                when _io_res_T_28 : @[execution.scala 27:20]
                  node _io_res_res_T_15 = add(io.rs1, io.rs2) @[execution.scala 29:20]
                  node _io_res_res_T_16 = tail(_io_res_res_T_15, 1) @[execution.scala 29:20]
                  io_res_res_1 <= _io_res_res_T_16 @[execution.scala 29:13]
                else :
                  node _io_res_T_29 = eq(UInt<9>("h100"), io.func10) @[execution.scala 27:20]
                  when _io_res_T_29 : @[execution.scala 27:20]
                    node _io_res_res_T_17 = sub(io.rs1, io.rs2) @[execution.scala 33:20]
                    node _io_res_res_T_18 = tail(_io_res_res_T_17, 1) @[execution.scala 33:20]
                    io_res_res_1 <= _io_res_res_T_18 @[execution.scala 33:13]
                  else :
                    node _io_res_T_30 = eq(UInt<1>("h1"), io.func10) @[execution.scala 27:20]
                    when _io_res_T_30 : @[execution.scala 27:20]
                      node _io_res_res_T_19 = bits(io.rs2, 4, 0) @[execution.scala 36:26]
                      node _io_res_res_T_20 = dshl(io.rs1, _io_res_res_T_19) @[execution.scala 36:20]
                      io_res_res_1 <= _io_res_res_T_20 @[execution.scala 36:13]
                    else :
                      node _io_res_T_31 = eq(UInt<2>("h2"), io.func10) @[execution.scala 27:20]
                      when _io_res_T_31 : @[execution.scala 27:20]
                        node _io_res_res_T_21 = asSInt(io.rs1) @[execution.scala 39:21]
                        node _io_res_res_T_22 = asSInt(io.rs2) @[execution.scala 39:34]
                        node _io_res_res_T_23 = lt(_io_res_res_T_21, _io_res_res_T_22) @[execution.scala 39:28]
                        io_res_res_1 <= _io_res_res_T_23 @[execution.scala 39:13]
                      else :
                        node _io_res_T_32 = eq(UInt<2>("h3"), io.func10) @[execution.scala 27:20]
                        when _io_res_T_32 : @[execution.scala 27:20]
                          node _io_res_res_T_24 = lt(io.rs1, io.rs2) @[execution.scala 42:21]
                          io_res_res_1 <= _io_res_res_T_24 @[execution.scala 42:13]
                        else :
                          node _io_res_T_33 = eq(UInt<3>("h4"), io.func10) @[execution.scala 27:20]
                          when _io_res_T_33 : @[execution.scala 27:20]
                            node _io_res_res_T_25 = xor(io.rs1, io.rs2) @[execution.scala 45:20]
                            io_res_res_1 <= _io_res_res_T_25 @[execution.scala 45:13]
                          else :
                            node _io_res_T_34 = eq(UInt<3>("h5"), io.func10) @[execution.scala 27:20]
                            when _io_res_T_34 : @[execution.scala 27:20]
                              node _io_res_res_T_26 = bits(io.rs2, 4, 0) @[execution.scala 48:26]
                              node _io_res_res_T_27 = dshr(io.rs1, _io_res_res_T_26) @[execution.scala 48:20]
                              io_res_res_1 <= _io_res_res_T_27 @[execution.scala 48:13]
                            else :
                              node _io_res_T_35 = eq(UInt<9>("h105"), io.func10) @[execution.scala 27:20]
                              when _io_res_T_35 : @[execution.scala 27:20]
                                node _io_res_res_T_28 = asSInt(io.rs1) @[execution.scala 51:21]
                                node _io_res_res_T_29 = bits(io.rs2, 4, 0) @[execution.scala 51:34]
                                node _io_res_res_T_30 = dshr(_io_res_res_T_28, _io_res_res_T_29) @[execution.scala 51:28]
                                node _io_res_res_T_31 = asUInt(_io_res_res_T_30) @[execution.scala 51:42]
                                io_res_res_1 <= _io_res_res_T_31 @[execution.scala 51:13]
                              else :
                                node _io_res_T_36 = eq(UInt<3>("h6"), io.func10) @[execution.scala 27:20]
                                when _io_res_T_36 : @[execution.scala 27:20]
                                  node _io_res_res_T_32 = or(io.rs1, io.rs2) @[execution.scala 54:20]
                                  io_res_res_1 <= _io_res_res_T_32 @[execution.scala 54:13]
                                else :
                                  node _io_res_T_37 = eq(UInt<3>("h7"), io.func10) @[execution.scala 27:20]
                                  when _io_res_T_37 : @[execution.scala 27:20]
                                    node _io_res_res_T_33 = and(io.rs1, io.rs2) @[execution.scala 57:20]
                                    io_res_res_1 <= _io_res_res_T_33 @[execution.scala 57:13]
                io.res <= io_res_res_1 @[execution.scala 183:14]
              else :
                node _T_14 = eq(UInt<6>("h37"), io.opcode) @[execution.scala 131:21]
                when _T_14 : @[execution.scala 131:21]
                  node _io_res_T_38 = shl(io.imm20, 12) @[execution.scala 188:26]
                  io.res <= _io_res_T_38 @[execution.scala 188:14]
                else :
                  node _T_15 = eq(UInt<7>("h63"), io.opcode) @[execution.scala 131:21]
                  when _T_15 : @[execution.scala 131:21]
                    node _io_res_T_39 = asSInt(io.pc) @[execution.scala 191:24]
                    node _io_res_T_40 = asSInt(io.imm) @[execution.scala 191:40]
                    node _io_res_T_41 = add(_io_res_T_39, _io_res_T_40) @[execution.scala 191:31]
                    node _io_res_T_42 = tail(_io_res_T_41, 1) @[execution.scala 191:31]
                    node _io_res_T_43 = asSInt(_io_res_T_42) @[execution.scala 191:31]
                    node _io_res_T_44 = asUInt(_io_res_T_43) @[execution.scala 191:48]
                    io.res <= _io_res_T_44 @[execution.scala 191:14]
                    wire io_branch_branch : UInt<1> @[execution.scala 101:22]
                    io_branch_branch <= UInt<1>("h0") @[execution.scala 102:12]
                    node _io_branch_T = eq(UInt<1>("h0"), io.func3) @[execution.scala 103:19]
                    when _io_branch_T : @[execution.scala 103:19]
                      node _io_branch_branch_T = eq(io.rs1, io.rs2) @[execution.scala 105:23]
                      io_branch_branch <= _io_branch_branch_T @[execution.scala 105:16]
                    else :
                      node _io_branch_T_1 = eq(UInt<1>("h1"), io.func3) @[execution.scala 103:19]
                      when _io_branch_T_1 : @[execution.scala 103:19]
                        node _io_branch_branch_T_1 = neq(io.rs1, io.rs2) @[execution.scala 108:23]
                        io_branch_branch <= _io_branch_branch_T_1 @[execution.scala 108:16]
                      else :
                        node _io_branch_T_2 = eq(UInt<3>("h4"), io.func3) @[execution.scala 103:19]
                        when _io_branch_T_2 : @[execution.scala 103:19]
                          node _io_branch_branch_T_2 = asSInt(io.rs1) @[execution.scala 111:23]
                          node _io_branch_branch_T_3 = asSInt(io.rs2) @[execution.scala 111:36]
                          node _io_branch_branch_T_4 = lt(_io_branch_branch_T_2, _io_branch_branch_T_3) @[execution.scala 111:30]
                          io_branch_branch <= _io_branch_branch_T_4 @[execution.scala 111:16]
                        else :
                          node _io_branch_T_3 = eq(UInt<3>("h5"), io.func3) @[execution.scala 103:19]
                          when _io_branch_T_3 : @[execution.scala 103:19]
                            node _io_branch_branch_T_5 = asSInt(io.rs1) @[execution.scala 115:23]
                            node _io_branch_branch_T_6 = asSInt(io.rs2) @[execution.scala 115:37]
                            node _io_branch_branch_T_7 = geq(_io_branch_branch_T_5, _io_branch_branch_T_6) @[execution.scala 115:30]
                            io_branch_branch <= _io_branch_branch_T_7 @[execution.scala 115:16]
                          else :
                            node _io_branch_T_4 = eq(UInt<3>("h6"), io.func3) @[execution.scala 103:19]
                            when _io_branch_T_4 : @[execution.scala 103:19]
                              node _io_branch_branch_T_8 = lt(io.rs1, io.rs2) @[execution.scala 118:23]
                              io_branch_branch <= _io_branch_branch_T_8 @[execution.scala 118:16]
                            else :
                              node _io_branch_T_5 = eq(UInt<3>("h7"), io.func3) @[execution.scala 103:19]
                              when _io_branch_T_5 : @[execution.scala 103:19]
                                node _io_branch_branch_T_9 = geq(io.rs1, io.rs2) @[execution.scala 121:23]
                                io_branch_branch <= _io_branch_branch_T_9 @[execution.scala 121:16]
                    io.branch <= io_branch_branch @[execution.scala 192:17]
                  else :
                    node _T_16 = eq(UInt<7>("h67"), io.opcode) @[execution.scala 131:21]
                    when _T_16 : @[execution.scala 131:21]
                      node _io_res_T_45 = add(io.pc, UInt<3>("h4")) @[execution.scala 195:23]
                      node _io_res_T_46 = tail(_io_res_T_45, 1) @[execution.scala 195:23]
                      io.res <= _io_res_T_46 @[execution.scala 195:14]
                      io.branch <= UInt<1>("h1") @[execution.scala 196:17]
                    else :
                      node _T_17 = eq(UInt<7>("h73"), io.opcode) @[execution.scala 131:21]
                      when _T_17 : @[execution.scala 131:21]
                        node _T_18 = asUInt(reset) @[execution.scala 200:13]
                        node _T_19 = eq(_T_18, UInt<1>("h0")) @[execution.scala 200:13]
                        when _T_19 : @[execution.scala 200:13]
                          printf(clock, UInt<1>("h1"), "\nEcall got damn\n") : printf @[execution.scala 200:13]


  module cpu :
    input clock : Clock
    input reset : Reset
    output io : { sevSegNum : UInt<32>}

    wire _reg_WIRE : UInt<32>[32] @[cpu.scala 47:60]
    _reg_WIRE[0] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[1] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[2] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[3] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[4] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[5] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[6] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[7] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[8] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[9] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[10] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[11] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[12] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[13] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[14] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[15] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[16] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[17] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[18] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[19] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[20] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[21] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[22] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[23] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[24] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[25] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[26] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[27] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[28] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[29] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[30] <= UInt<32>("h0") @[cpu.scala 47:60]
    _reg_WIRE[31] <= UInt<32>("h0") @[cpu.scala 47:60]
    reg reg : UInt<32>[32], clock with :
      reset => (reset, _reg_WIRE) @[cpu.scala 47:52]
    inst DataMem of memory @[cpu.scala 49:23]
    DataMem.clock <= clock
    DataMem.reset <= reset
    DataMem.io.Length <= UInt<1>("h0") @[cpu.scala 50:21]
    node _InstrcutionMem_T = asUInt(asSInt(UInt<32>("h10000293"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_1 = asUInt(asSInt(UInt<32>("hfc00313"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_2 = asUInt(asSInt(UInt<32>("h6400513"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_3 = asUInt(asSInt(UInt<32>("hfff50513"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_4 = asUInt(asSInt(UInt<32>("ha28023"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_5 = asUInt(asSInt(UInt<32>("hfea04ce3"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_6 = asUInt(asSInt(UInt<32>("h150513"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_7 = asUInt(asSInt(UInt<32>("h258593"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_8 = asUInt(asSInt(UInt<32>("h150513"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_9 = asUInt(asSInt(UInt<32>("ha28023"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_10 = asUInt(asSInt(UInt<32>("hb280a3"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_11 = asUInt(asSInt(UInt<32>("hfe65c8e3"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_12 = asUInt(asSInt(UInt<32>("ha00893"))) @[cpu.scala 78:65]
    node _InstrcutionMem_T_13 = asUInt(asSInt(UInt<32>("h73"))) @[cpu.scala 78:65]
    wire InstrcutionMem : UInt<32>[14] @[cpu.scala 78:31]
    InstrcutionMem[0] <= _InstrcutionMem_T @[cpu.scala 78:31]
    InstrcutionMem[1] <= _InstrcutionMem_T_1 @[cpu.scala 78:31]
    InstrcutionMem[2] <= _InstrcutionMem_T_2 @[cpu.scala 78:31]
    InstrcutionMem[3] <= _InstrcutionMem_T_3 @[cpu.scala 78:31]
    InstrcutionMem[4] <= _InstrcutionMem_T_4 @[cpu.scala 78:31]
    InstrcutionMem[5] <= _InstrcutionMem_T_5 @[cpu.scala 78:31]
    InstrcutionMem[6] <= _InstrcutionMem_T_6 @[cpu.scala 78:31]
    InstrcutionMem[7] <= _InstrcutionMem_T_7 @[cpu.scala 78:31]
    InstrcutionMem[8] <= _InstrcutionMem_T_8 @[cpu.scala 78:31]
    InstrcutionMem[9] <= _InstrcutionMem_T_9 @[cpu.scala 78:31]
    InstrcutionMem[10] <= _InstrcutionMem_T_10 @[cpu.scala 78:31]
    InstrcutionMem[11] <= _InstrcutionMem_T_11 @[cpu.scala 78:31]
    InstrcutionMem[12] <= _InstrcutionMem_T_12 @[cpu.scala 78:31]
    InstrcutionMem[13] <= _InstrcutionMem_T_13 @[cpu.scala 78:31]
    inst decoder of decode @[cpu.scala 82:23]
    decoder.clock <= clock
    decoder.reset <= reset
    wire decOut : { opcode : UInt<7>, rs1 : UInt<32>, rs2 : UInt<32>, rd : UInt<5>, func3 : UInt<3>, func10 : UInt<10>, imm : UInt<12>, imm20 : UInt<20>, pc : UInt<32>, valid : UInt<1>} @[cpu.scala 83:20]
    inst exe of execution @[cpu.scala 85:19]
    exe.clock <= clock
    exe.reset <= reset
    wire _decExReg_WIRE : { opcode : UInt<7>, rs1 : UInt<32>, rs2 : UInt<32>, rd : UInt<5>, func3 : UInt<3>, func10 : UInt<10>, imm : UInt<12>, imm20 : UInt<20>, pc : UInt<32>, valid : UInt<1>} @[cpu.scala 86:38]
    _decExReg_WIRE.valid <= UInt<1>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.pc <= UInt<32>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.imm20 <= UInt<20>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.imm <= UInt<12>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.func10 <= UInt<10>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.func3 <= UInt<3>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.rd <= UInt<5>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.rs2 <= UInt<32>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.rs1 <= UInt<32>("h0") @[cpu.scala 86:38]
    _decExReg_WIRE.opcode <= UInt<7>("h0") @[cpu.scala 86:38]
    reg decExReg : { opcode : UInt<7>, rs1 : UInt<32>, rs2 : UInt<32>, rd : UInt<5>, func3 : UInt<3>, func10 : UInt<10>, imm : UInt<12>, imm20 : UInt<20>, pc : UInt<32>, valid : UInt<1>}, clock with :
      reset => (reset, _decExReg_WIRE) @[cpu.scala 86:25]
    wire _memReg_WIRE : { rd : UInt<5>, regData : UInt<32>, memData : UInt<32>, Addr : UInt<32>, Len : UInt<2>, memWr : UInt<1>, sign : UInt<1>, valid : UInt<1>} @[cpu.scala 87:36]
    _memReg_WIRE.valid <= UInt<1>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.sign <= UInt<1>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.memWr <= UInt<1>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.Len <= UInt<2>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.Addr <= UInt<32>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.memData <= UInt<32>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.regData <= UInt<32>("h0") @[cpu.scala 87:36]
    _memReg_WIRE.rd <= UInt<5>("h0") @[cpu.scala 87:36]
    reg memReg : { rd : UInt<5>, regData : UInt<32>, memData : UInt<32>, Addr : UInt<32>, Len : UInt<2>, memWr : UInt<1>, sign : UInt<1>, valid : UInt<1>}, clock with :
      reset => (reset, _memReg_WIRE) @[cpu.scala 87:23]
    wire _wbReg_WIRE : { rd : UInt<5>, regData : UInt<32>, memData : UInt<32>, Addr : UInt<32>, Len : UInt<2>, memWr : UInt<1>, sign : UInt<1>, valid : UInt<1>} @[cpu.scala 88:35]
    _wbReg_WIRE.valid <= UInt<1>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.sign <= UInt<1>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.memWr <= UInt<1>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.Len <= UInt<2>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.Addr <= UInt<32>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.memData <= UInt<32>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.regData <= UInt<32>("h0") @[cpu.scala 88:35]
    _wbReg_WIRE.rd <= UInt<5>("h0") @[cpu.scala 88:35]
    reg wbReg : { rd : UInt<5>, regData : UInt<32>, memData : UInt<32>, Addr : UInt<32>, Len : UInt<2>, memWr : UInt<1>, sign : UInt<1>, valid : UInt<1>}, clock with :
      reset => (reset, _wbReg_WIRE) @[cpu.scala 88:22]
    wire wbData : UInt @[cpu.scala 89:27]
    wbData <= UInt<1>("h0") @[cpu.scala 89:27]
    wire doBranch : UInt<1> @[cpu.scala 91:29]
    doBranch <= UInt<1>("h0") @[cpu.scala 91:29]
    wire branchTarget : UInt @[cpu.scala 92:33]
    branchTarget <= UInt<1>("h0") @[cpu.scala 92:33]
    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[cpu.scala 94:22]
    node _pcNext_T = add(pcReg, UInt<3>("h4")) @[cpu.scala 95:50]
    node _pcNext_T_1 = tail(_pcNext_T, 1) @[cpu.scala 95:50]
    node pcNext = mux(doBranch, branchTarget, _pcNext_T_1) @[cpu.scala 95:19]
    pcReg <= pcNext @[cpu.scala 96:9]
    node _instr_T = bits(pcReg, 31, 2) @[cpu.scala 98:35]
    node _instr_T_1 = bits(_instr_T, 3, 0)
    wire done : UInt<1> @[cpu.scala 100:25]
    done <= UInt<1>("h0") @[cpu.scala 100:25]
    reg pcRegReg : UInt, clock with :
      reset => (UInt<1>("h0"), pcRegReg) @[cpu.scala 102:25]
    pcRegReg <= pcReg @[cpu.scala 102:25]
    node _T = asUInt(reset) @[cpu.scala 105:9]
    node _T_1 = eq(_T, UInt<1>("h0")) @[cpu.scala 105:9]
    when _T_1 : @[cpu.scala 105:9]
      printf(clock, UInt<1>("h1"), "%x ", pcReg) : printf @[cpu.scala 105:9]
    reg instrReg : UInt, clock with :
      reset => (reset, UInt<6>("h33")) @[cpu.scala 107:25]
    node _instrReg_T = mux(doBranch, UInt<6>("h33"), InstrcutionMem[_instr_T_1]) @[cpu.scala 108:18]
    instrReg <= _instrReg_T @[cpu.scala 108:12]
    node _T_2 = eq(instrReg, UInt<29>("h10000293")) @[cpu.scala 110:17]
    when _T_2 : @[cpu.scala 110:34]
      done <= UInt<1>("h1") @[cpu.scala 111:10]
    decoder.io.instr <= instrReg @[cpu.scala 119:20]
    node _decOut_opcode_T = bits(instrReg, 6, 0) @[cpu.scala 120:28]
    decOut.opcode <= _decOut_opcode_T @[cpu.scala 120:17]
    decOut.rs1 <= decoder.io.rs1 @[cpu.scala 121:14]
    decOut.rs2 <= decoder.io.rs2 @[cpu.scala 122:14]
    decOut.rd <= decoder.io.rd @[cpu.scala 123:13]
    decOut.func3 <= decoder.io.func3 @[cpu.scala 124:16]
    decOut.func10 <= decoder.io.func10 @[cpu.scala 125:17]
    decOut.imm <= decoder.io.imm @[cpu.scala 126:14]
    decOut.imm20 <= decoder.io.imm20 @[cpu.scala 127:16]
    decOut.pc <= pcRegReg @[cpu.scala 128:13]
    node _decOut_valid_T = eq(doBranch, UInt<1>("h0")) @[cpu.scala 129:19]
    decOut.valid <= _decOut_valid_T @[cpu.scala 129:16]
    decExReg <= decOut @[cpu.scala 134:12]
    exe.io.opcode <= decExReg.opcode @[cpu.scala 136:17]
    node _exe_io_rs1_T = eq(memReg.rd, decExReg.rs1) @[cpu.scala 141:32]
    node _exe_io_rs1_T_1 = and(_exe_io_rs1_T, memReg.valid) @[cpu.scala 141:50]
    node _exe_io_rs1_T_2 = neq(decExReg.rs1, UInt<1>("h0")) @[cpu.scala 141:83]
    node _exe_io_rs1_T_3 = and(_exe_io_rs1_T_1, _exe_io_rs1_T_2) @[cpu.scala 141:66]
    node _exe_io_rs1_T_4 = eq(wbReg.rd, decExReg.rs1) @[cpu.scala 142:19]
    node _exe_io_rs1_T_5 = and(_exe_io_rs1_T_4, wbReg.valid) @[cpu.scala 142:37]
    node _exe_io_rs1_T_6 = bits(decExReg.rs1, 4, 0)
    node _exe_io_rs1_T_7 = mux(_exe_io_rs1_T_5, wbData, reg[_exe_io_rs1_T_6]) @[cpu.scala 142:8]
    node _exe_io_rs1_T_8 = mux(_exe_io_rs1_T_3, memReg.regData, _exe_io_rs1_T_7) @[cpu.scala 141:20]
    exe.io.rs1 <= _exe_io_rs1_T_8 @[cpu.scala 141:14]
    node _exe_io_rs2_T = eq(memReg.rd, decExReg.rs2) @[cpu.scala 143:32]
    node _exe_io_rs2_T_1 = and(_exe_io_rs2_T, memReg.valid) @[cpu.scala 143:50]
    node _exe_io_rs2_T_2 = neq(decExReg.rs2, UInt<1>("h0")) @[cpu.scala 143:83]
    node _exe_io_rs2_T_3 = and(_exe_io_rs2_T_1, _exe_io_rs2_T_2) @[cpu.scala 143:66]
    node _exe_io_rs2_T_4 = eq(wbReg.rd, decExReg.rs2) @[cpu.scala 144:18]
    node _exe_io_rs2_T_5 = bits(decExReg.rs2, 4, 0)
    node _exe_io_rs2_T_6 = mux(_exe_io_rs2_T_4, wbData, reg[_exe_io_rs2_T_5]) @[cpu.scala 144:8]
    node _exe_io_rs2_T_7 = mux(_exe_io_rs2_T_3, memReg.regData, _exe_io_rs2_T_6) @[cpu.scala 143:20]
    exe.io.rs2 <= _exe_io_rs2_T_7 @[cpu.scala 143:14]
    exe.io.rd <= decExReg.rd @[cpu.scala 146:13]
    exe.io.func3 <= decExReg.func3 @[cpu.scala 147:16]
    exe.io.func10 <= decExReg.func10 @[cpu.scala 148:17]
    exe.io.imm <= decExReg.imm @[cpu.scala 149:14]
    exe.io.imm20 <= decExReg.imm20 @[cpu.scala 150:16]
    exe.io.pc <= decExReg.pc @[cpu.scala 151:13]
    node _branchTarget_T = eq(exe.io.opcode, UInt<7>("h67")) @[cpu.scala 157:37]
    node _branchTarget_T_1 = asSInt(exe.io.rs1) @[cpu.scala 157:60]
    node _branchTarget_T_2 = asSInt(decExReg.imm) @[cpu.scala 157:82]
    node _branchTarget_T_3 = add(_branchTarget_T_1, _branchTarget_T_2) @[cpu.scala 157:67]
    node _branchTarget_T_4 = tail(_branchTarget_T_3, 1) @[cpu.scala 157:67]
    node _branchTarget_T_5 = asSInt(_branchTarget_T_4) @[cpu.scala 157:67]
    node _branchTarget_T_6 = asUInt(_branchTarget_T_5) @[cpu.scala 157:90]
    node _branchTarget_T_7 = asSInt(decExReg.pc) @[cpu.scala 157:110]
    node _branchTarget_T_8 = eq(exe.io.opcode, UInt<5>("h17")) @[cpu.scala 157:137]
    node _branchTarget_T_9 = asSInt(decExReg.imm20) @[cpu.scala 157:163]
    node _branchTarget_T_10 = asSInt(decExReg.imm) @[cpu.scala 157:183]
    node _branchTarget_T_11 = mux(_branchTarget_T_8, _branchTarget_T_9, _branchTarget_T_10) @[cpu.scala 157:122]
    node _branchTarget_T_12 = add(_branchTarget_T_7, _branchTarget_T_11) @[cpu.scala 157:117]
    node _branchTarget_T_13 = tail(_branchTarget_T_12, 1) @[cpu.scala 157:117]
    node _branchTarget_T_14 = asSInt(_branchTarget_T_13) @[cpu.scala 157:117]
    node _branchTarget_T_15 = asUInt(_branchTarget_T_14) @[cpu.scala 157:192]
    node _branchTarget_T_16 = mux(_branchTarget_T, _branchTarget_T_6, _branchTarget_T_15) @[cpu.scala 157:22]
    branchTarget <= _branchTarget_T_16 @[cpu.scala 157:16]
    node _doBranch_T = and(exe.io.branch, decExReg.valid) @[cpu.scala 158:29]
    doBranch <= _doBranch_T @[cpu.scala 158:12]
    node _T_3 = eq(exe.io.opcode, UInt<7>("h73")) @[cpu.scala 168:22]
    when _T_3 : @[cpu.scala 168:33]
      node _T_4 = asUInt(reset) @[cpu.scala 169:11]
      node _T_5 = eq(_T_4, UInt<1>("h0")) @[cpu.scala 169:11]
      when _T_5 : @[cpu.scala 169:11]
        printf(clock, UInt<1>("h1"), "reg: \n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x\n%x", reg[0], reg[1], reg[2], reg[3], reg[4], reg[5], reg[6], reg[7], reg[8], reg[9], reg[10], reg[11], reg[12], reg[13], reg[14], reg[15], reg[16], reg[17], reg[18], reg[19], reg[20], reg[21], reg[22], reg[23], reg[24], reg[25], reg[26], reg[27], reg[28], reg[29], reg[30], reg[31]) : printf_1 @[cpu.scala 169:11]
      done <= UInt<1>("h1") @[cpu.scala 170:10]
    node _memReg_regData_T = mux(decExReg.valid, exe.io.res, UInt<1>("h0")) @[cpu.scala 173:24]
    memReg.regData <= _memReg_regData_T @[cpu.scala 173:18]
    node _memReg_rd_T = mux(decExReg.valid, exe.io.rd, UInt<1>("h0")) @[cpu.scala 174:19]
    memReg.rd <= _memReg_rd_T @[cpu.scala 174:13]
    node _memReg_Addr_T = add(exe.io.rs1, exe.io.imm) @[cpu.scala 178:29]
    node _memReg_Addr_T_1 = tail(_memReg_Addr_T, 1) @[cpu.scala 178:29]
    memReg.Addr <= _memReg_Addr_T_1 @[cpu.scala 178:15]
    node _memReg_memWr_T = gt(exe.io.memLen, UInt<1>("h0")) @[cpu.scala 179:35]
    node _memReg_memWr_T_1 = eq(exe.io.opcode, UInt<6>("h23")) @[cpu.scala 179:59]
    node _memReg_memWr_T_2 = and(_memReg_memWr_T, _memReg_memWr_T_1) @[cpu.scala 179:42]
    memReg.memWr <= _memReg_memWr_T_2 @[cpu.scala 179:16]
    node _memReg_Len_T = mux(decExReg.valid, exe.io.memLen, UInt<1>("h0")) @[cpu.scala 180:21]
    memReg.Len <= _memReg_Len_T @[cpu.scala 180:14]
    memReg.sign <= exe.io.sign @[cpu.scala 181:15]
    node _memReg_valid_T = neq(exe.io.opcode, UInt<7>("h63")) @[cpu.scala 182:34]
    node _memReg_valid_T_1 = and(_memReg_valid_T, decExReg.valid) @[cpu.scala 182:46]
    memReg.valid <= _memReg_valid_T_1 @[cpu.scala 182:16]
    DataMem.io.DataIn <= memReg.regData @[cpu.scala 188:21]
    DataMem.io.rd <= memReg.rd @[cpu.scala 189:17]
    DataMem.io.Addr <= memReg.Addr @[cpu.scala 190:19]
    DataMem.io.Length <= memReg.Len @[cpu.scala 191:21]
    DataMem.io.memWr <= memReg.memWr @[cpu.scala 192:20]
    DataMem.io.sign <= memReg.sign @[cpu.scala 193:19]
    wbReg <= memReg @[cpu.scala 196:9]
    wbReg.memData <= DataMem.io.DataOut @[cpu.scala 197:17]
    io.sevSegNum <= instrReg @[cpu.scala 198:16]
    node _T_6 = eq(wbReg.memWr, UInt<1>("h0")) @[cpu.scala 204:8]
    node _T_7 = and(_T_6, wbReg.valid) @[cpu.scala 204:21]
    when _T_7 : @[cpu.scala 204:36]
      node _T_8 = gt(wbReg.Len, UInt<1>("h0")) @[cpu.scala 205:20]
      when _T_8 : @[cpu.scala 205:26]
        wbData <= wbReg.memData @[cpu.scala 206:14]
      else :
        wbData <= wbReg.regData @[cpu.scala 208:14]
      node _T_9 = eq(wbReg.rd, UInt<1>("h0")) @[cpu.scala 210:19]
      when _T_9 : @[cpu.scala 210:27]
        wbData <= UInt<1>("h0") @[cpu.scala 211:14]
      reg[wbReg.rd] <= wbData @[cpu.scala 214:19]


  module SevenSegDec :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<4>, out : UInt<7>}

    wire sevSeg : UInt @[SevenSegDec.scala 12:27]
    sevSeg <= UInt<1>("h0") @[SevenSegDec.scala 12:27]
    node _T = eq(UInt<1>("h0"), io.in) @[SevenSegDec.scala 16:17]
    when _T : @[SevenSegDec.scala 16:17]
      sevSeg <= UInt<6>("h3f") @[SevenSegDec.scala 18:14]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.in) @[SevenSegDec.scala 16:17]
      when _T_1 : @[SevenSegDec.scala 16:17]
        sevSeg <= UInt<3>("h6") @[SevenSegDec.scala 21:14]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.in) @[SevenSegDec.scala 16:17]
        when _T_2 : @[SevenSegDec.scala 16:17]
          sevSeg <= UInt<7>("h5b") @[SevenSegDec.scala 24:14]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.in) @[SevenSegDec.scala 16:17]
          when _T_3 : @[SevenSegDec.scala 16:17]
            sevSeg <= UInt<7>("h4f") @[SevenSegDec.scala 27:14]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.in) @[SevenSegDec.scala 16:17]
            when _T_4 : @[SevenSegDec.scala 16:17]
              sevSeg <= UInt<7>("h66") @[SevenSegDec.scala 30:14]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.in) @[SevenSegDec.scala 16:17]
              when _T_5 : @[SevenSegDec.scala 16:17]
                sevSeg <= UInt<7>("h6d") @[SevenSegDec.scala 33:14]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.in) @[SevenSegDec.scala 16:17]
                when _T_6 : @[SevenSegDec.scala 16:17]
                  sevSeg <= UInt<7>("h7d") @[SevenSegDec.scala 36:14]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.in) @[SevenSegDec.scala 16:17]
                  when _T_7 : @[SevenSegDec.scala 16:17]
                    sevSeg <= UInt<3>("h7") @[SevenSegDec.scala 39:14]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.in) @[SevenSegDec.scala 16:17]
                    when _T_8 : @[SevenSegDec.scala 16:17]
                      sevSeg <= UInt<7>("h7f") @[SevenSegDec.scala 42:14]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.in) @[SevenSegDec.scala 16:17]
                      when _T_9 : @[SevenSegDec.scala 16:17]
                        sevSeg <= UInt<7>("h6f") @[SevenSegDec.scala 45:14]
                      else :
                        node _T_10 = eq(UInt<4>("ha"), io.in) @[SevenSegDec.scala 16:17]
                        when _T_10 : @[SevenSegDec.scala 16:17]
                          sevSeg <= UInt<7>("h77") @[SevenSegDec.scala 48:14]
                        else :
                          node _T_11 = eq(UInt<4>("hb"), io.in) @[SevenSegDec.scala 16:17]
                          when _T_11 : @[SevenSegDec.scala 16:17]
                            sevSeg <= UInt<7>("h7c") @[SevenSegDec.scala 51:14]
                          else :
                            node _T_12 = eq(UInt<4>("hc"), io.in) @[SevenSegDec.scala 16:17]
                            when _T_12 : @[SevenSegDec.scala 16:17]
                              sevSeg <= UInt<6>("h39") @[SevenSegDec.scala 54:14]
                            else :
                              node _T_13 = eq(UInt<4>("hd"), io.in) @[SevenSegDec.scala 16:17]
                              when _T_13 : @[SevenSegDec.scala 16:17]
                                sevSeg <= UInt<7>("h5e") @[SevenSegDec.scala 57:14]
                              else :
                                node _T_14 = eq(UInt<4>("he"), io.in) @[SevenSegDec.scala 16:17]
                                when _T_14 : @[SevenSegDec.scala 16:17]
                                  sevSeg <= UInt<7>("h79") @[SevenSegDec.scala 60:14]
                                else :
                                  node _T_15 = eq(UInt<4>("hf"), io.in) @[SevenSegDec.scala 16:17]
                                  when _T_15 : @[SevenSegDec.scala 16:17]
                                    sevSeg <= UInt<7>("h71") @[SevenSegDec.scala 63:14]
    io.out <= sevSeg @[SevenSegDec.scala 68:10]

  module SevenSegDec_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<4>, out : UInt<7>}

    wire sevSeg : UInt @[SevenSegDec.scala 12:27]
    sevSeg <= UInt<1>("h0") @[SevenSegDec.scala 12:27]
    node _T = eq(UInt<1>("h0"), io.in) @[SevenSegDec.scala 16:17]
    when _T : @[SevenSegDec.scala 16:17]
      sevSeg <= UInt<6>("h3f") @[SevenSegDec.scala 18:14]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.in) @[SevenSegDec.scala 16:17]
      when _T_1 : @[SevenSegDec.scala 16:17]
        sevSeg <= UInt<3>("h6") @[SevenSegDec.scala 21:14]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.in) @[SevenSegDec.scala 16:17]
        when _T_2 : @[SevenSegDec.scala 16:17]
          sevSeg <= UInt<7>("h5b") @[SevenSegDec.scala 24:14]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.in) @[SevenSegDec.scala 16:17]
          when _T_3 : @[SevenSegDec.scala 16:17]
            sevSeg <= UInt<7>("h4f") @[SevenSegDec.scala 27:14]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.in) @[SevenSegDec.scala 16:17]
            when _T_4 : @[SevenSegDec.scala 16:17]
              sevSeg <= UInt<7>("h66") @[SevenSegDec.scala 30:14]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.in) @[SevenSegDec.scala 16:17]
              when _T_5 : @[SevenSegDec.scala 16:17]
                sevSeg <= UInt<7>("h6d") @[SevenSegDec.scala 33:14]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.in) @[SevenSegDec.scala 16:17]
                when _T_6 : @[SevenSegDec.scala 16:17]
                  sevSeg <= UInt<7>("h7d") @[SevenSegDec.scala 36:14]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.in) @[SevenSegDec.scala 16:17]
                  when _T_7 : @[SevenSegDec.scala 16:17]
                    sevSeg <= UInt<3>("h7") @[SevenSegDec.scala 39:14]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.in) @[SevenSegDec.scala 16:17]
                    when _T_8 : @[SevenSegDec.scala 16:17]
                      sevSeg <= UInt<7>("h7f") @[SevenSegDec.scala 42:14]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.in) @[SevenSegDec.scala 16:17]
                      when _T_9 : @[SevenSegDec.scala 16:17]
                        sevSeg <= UInt<7>("h6f") @[SevenSegDec.scala 45:14]
                      else :
                        node _T_10 = eq(UInt<4>("ha"), io.in) @[SevenSegDec.scala 16:17]
                        when _T_10 : @[SevenSegDec.scala 16:17]
                          sevSeg <= UInt<7>("h77") @[SevenSegDec.scala 48:14]
                        else :
                          node _T_11 = eq(UInt<4>("hb"), io.in) @[SevenSegDec.scala 16:17]
                          when _T_11 : @[SevenSegDec.scala 16:17]
                            sevSeg <= UInt<7>("h7c") @[SevenSegDec.scala 51:14]
                          else :
                            node _T_12 = eq(UInt<4>("hc"), io.in) @[SevenSegDec.scala 16:17]
                            when _T_12 : @[SevenSegDec.scala 16:17]
                              sevSeg <= UInt<6>("h39") @[SevenSegDec.scala 54:14]
                            else :
                              node _T_13 = eq(UInt<4>("hd"), io.in) @[SevenSegDec.scala 16:17]
                              when _T_13 : @[SevenSegDec.scala 16:17]
                                sevSeg <= UInt<7>("h5e") @[SevenSegDec.scala 57:14]
                              else :
                                node _T_14 = eq(UInt<4>("he"), io.in) @[SevenSegDec.scala 16:17]
                                when _T_14 : @[SevenSegDec.scala 16:17]
                                  sevSeg <= UInt<7>("h79") @[SevenSegDec.scala 60:14]
                                else :
                                  node _T_15 = eq(UInt<4>("hf"), io.in) @[SevenSegDec.scala 16:17]
                                  when _T_15 : @[SevenSegDec.scala 16:17]
                                    sevSeg <= UInt<7>("h71") @[SevenSegDec.scala 63:14]
    io.out <= sevSeg @[SevenSegDec.scala 68:10]

  module SevenSegDec_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<4>, out : UInt<7>}

    wire sevSeg : UInt @[SevenSegDec.scala 12:27]
    sevSeg <= UInt<1>("h0") @[SevenSegDec.scala 12:27]
    node _T = eq(UInt<1>("h0"), io.in) @[SevenSegDec.scala 16:17]
    when _T : @[SevenSegDec.scala 16:17]
      sevSeg <= UInt<6>("h3f") @[SevenSegDec.scala 18:14]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.in) @[SevenSegDec.scala 16:17]
      when _T_1 : @[SevenSegDec.scala 16:17]
        sevSeg <= UInt<3>("h6") @[SevenSegDec.scala 21:14]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.in) @[SevenSegDec.scala 16:17]
        when _T_2 : @[SevenSegDec.scala 16:17]
          sevSeg <= UInt<7>("h5b") @[SevenSegDec.scala 24:14]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.in) @[SevenSegDec.scala 16:17]
          when _T_3 : @[SevenSegDec.scala 16:17]
            sevSeg <= UInt<7>("h4f") @[SevenSegDec.scala 27:14]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.in) @[SevenSegDec.scala 16:17]
            when _T_4 : @[SevenSegDec.scala 16:17]
              sevSeg <= UInt<7>("h66") @[SevenSegDec.scala 30:14]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.in) @[SevenSegDec.scala 16:17]
              when _T_5 : @[SevenSegDec.scala 16:17]
                sevSeg <= UInt<7>("h6d") @[SevenSegDec.scala 33:14]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.in) @[SevenSegDec.scala 16:17]
                when _T_6 : @[SevenSegDec.scala 16:17]
                  sevSeg <= UInt<7>("h7d") @[SevenSegDec.scala 36:14]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.in) @[SevenSegDec.scala 16:17]
                  when _T_7 : @[SevenSegDec.scala 16:17]
                    sevSeg <= UInt<3>("h7") @[SevenSegDec.scala 39:14]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.in) @[SevenSegDec.scala 16:17]
                    when _T_8 : @[SevenSegDec.scala 16:17]
                      sevSeg <= UInt<7>("h7f") @[SevenSegDec.scala 42:14]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.in) @[SevenSegDec.scala 16:17]
                      when _T_9 : @[SevenSegDec.scala 16:17]
                        sevSeg <= UInt<7>("h6f") @[SevenSegDec.scala 45:14]
                      else :
                        node _T_10 = eq(UInt<4>("ha"), io.in) @[SevenSegDec.scala 16:17]
                        when _T_10 : @[SevenSegDec.scala 16:17]
                          sevSeg <= UInt<7>("h77") @[SevenSegDec.scala 48:14]
                        else :
                          node _T_11 = eq(UInt<4>("hb"), io.in) @[SevenSegDec.scala 16:17]
                          when _T_11 : @[SevenSegDec.scala 16:17]
                            sevSeg <= UInt<7>("h7c") @[SevenSegDec.scala 51:14]
                          else :
                            node _T_12 = eq(UInt<4>("hc"), io.in) @[SevenSegDec.scala 16:17]
                            when _T_12 : @[SevenSegDec.scala 16:17]
                              sevSeg <= UInt<6>("h39") @[SevenSegDec.scala 54:14]
                            else :
                              node _T_13 = eq(UInt<4>("hd"), io.in) @[SevenSegDec.scala 16:17]
                              when _T_13 : @[SevenSegDec.scala 16:17]
                                sevSeg <= UInt<7>("h5e") @[SevenSegDec.scala 57:14]
                              else :
                                node _T_14 = eq(UInt<4>("he"), io.in) @[SevenSegDec.scala 16:17]
                                when _T_14 : @[SevenSegDec.scala 16:17]
                                  sevSeg <= UInt<7>("h79") @[SevenSegDec.scala 60:14]
                                else :
                                  node _T_15 = eq(UInt<4>("hf"), io.in) @[SevenSegDec.scala 16:17]
                                  when _T_15 : @[SevenSegDec.scala 16:17]
                                    sevSeg <= UInt<7>("h71") @[SevenSegDec.scala 63:14]
    io.out <= sevSeg @[SevenSegDec.scala 68:10]

  module SevenSegDec_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<4>, out : UInt<7>}

    wire sevSeg : UInt @[SevenSegDec.scala 12:27]
    sevSeg <= UInt<1>("h0") @[SevenSegDec.scala 12:27]
    node _T = eq(UInt<1>("h0"), io.in) @[SevenSegDec.scala 16:17]
    when _T : @[SevenSegDec.scala 16:17]
      sevSeg <= UInt<6>("h3f") @[SevenSegDec.scala 18:14]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.in) @[SevenSegDec.scala 16:17]
      when _T_1 : @[SevenSegDec.scala 16:17]
        sevSeg <= UInt<3>("h6") @[SevenSegDec.scala 21:14]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.in) @[SevenSegDec.scala 16:17]
        when _T_2 : @[SevenSegDec.scala 16:17]
          sevSeg <= UInt<7>("h5b") @[SevenSegDec.scala 24:14]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.in) @[SevenSegDec.scala 16:17]
          when _T_3 : @[SevenSegDec.scala 16:17]
            sevSeg <= UInt<7>("h4f") @[SevenSegDec.scala 27:14]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.in) @[SevenSegDec.scala 16:17]
            when _T_4 : @[SevenSegDec.scala 16:17]
              sevSeg <= UInt<7>("h66") @[SevenSegDec.scala 30:14]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.in) @[SevenSegDec.scala 16:17]
              when _T_5 : @[SevenSegDec.scala 16:17]
                sevSeg <= UInt<7>("h6d") @[SevenSegDec.scala 33:14]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.in) @[SevenSegDec.scala 16:17]
                when _T_6 : @[SevenSegDec.scala 16:17]
                  sevSeg <= UInt<7>("h7d") @[SevenSegDec.scala 36:14]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.in) @[SevenSegDec.scala 16:17]
                  when _T_7 : @[SevenSegDec.scala 16:17]
                    sevSeg <= UInt<3>("h7") @[SevenSegDec.scala 39:14]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.in) @[SevenSegDec.scala 16:17]
                    when _T_8 : @[SevenSegDec.scala 16:17]
                      sevSeg <= UInt<7>("h7f") @[SevenSegDec.scala 42:14]
                    else :
                      node _T_9 = eq(UInt<4>("h9"), io.in) @[SevenSegDec.scala 16:17]
                      when _T_9 : @[SevenSegDec.scala 16:17]
                        sevSeg <= UInt<7>("h6f") @[SevenSegDec.scala 45:14]
                      else :
                        node _T_10 = eq(UInt<4>("ha"), io.in) @[SevenSegDec.scala 16:17]
                        when _T_10 : @[SevenSegDec.scala 16:17]
                          sevSeg <= UInt<7>("h77") @[SevenSegDec.scala 48:14]
                        else :
                          node _T_11 = eq(UInt<4>("hb"), io.in) @[SevenSegDec.scala 16:17]
                          when _T_11 : @[SevenSegDec.scala 16:17]
                            sevSeg <= UInt<7>("h7c") @[SevenSegDec.scala 51:14]
                          else :
                            node _T_12 = eq(UInt<4>("hc"), io.in) @[SevenSegDec.scala 16:17]
                            when _T_12 : @[SevenSegDec.scala 16:17]
                              sevSeg <= UInt<6>("h39") @[SevenSegDec.scala 54:14]
                            else :
                              node _T_13 = eq(UInt<4>("hd"), io.in) @[SevenSegDec.scala 16:17]
                              when _T_13 : @[SevenSegDec.scala 16:17]
                                sevSeg <= UInt<7>("h5e") @[SevenSegDec.scala 57:14]
                              else :
                                node _T_14 = eq(UInt<4>("he"), io.in) @[SevenSegDec.scala 16:17]
                                when _T_14 : @[SevenSegDec.scala 16:17]
                                  sevSeg <= UInt<7>("h79") @[SevenSegDec.scala 60:14]
                                else :
                                  node _T_15 = eq(UInt<4>("hf"), io.in) @[SevenSegDec.scala 16:17]
                                  when _T_15 : @[SevenSegDec.scala 16:17]
                                    sevSeg <= UInt<7>("h71") @[SevenSegDec.scala 63:14]
    io.out <= sevSeg @[SevenSegDec.scala 68:10]

  module DisplayMultiplexer :
    input clock : Clock
    input reset : Reset
    output io : { flip c2Full : UInt<1>, flip c5Full : UInt<1>, flip noCans : UInt<1>, flip iced : UInt<1>, flip hex : UInt<16>, seg : UInt<7>, an : UInt<4>}

    wire sevSeg : UInt<7> @[DisplayMultiplexer.scala 18:27]
    sevSeg <= UInt<7>("h7f") @[DisplayMultiplexer.scala 18:27]
    wire select : UInt<4> @[DisplayMultiplexer.scala 19:27]
    select <= UInt<4>("h1") @[DisplayMultiplexer.scala 19:27]
    wire coin2full : UInt<4>[4] @[DisplayMultiplexer.scala 22:26]
    coin2full[0] <= UInt<1>("h1") @[DisplayMultiplexer.scala 22:26]
    coin2full[1] <= UInt<2>("h2") @[DisplayMultiplexer.scala 22:26]
    coin2full[2] <= UInt<3>("h4") @[DisplayMultiplexer.scala 22:26]
    coin2full[3] <= UInt<4>("h8") @[DisplayMultiplexer.scala 22:26]
    wire coin5full : UInt<7>[4] @[DisplayMultiplexer.scala 23:26]
    coin5full[0] <= UInt<5>("h10") @[DisplayMultiplexer.scala 23:26]
    coin5full[1] <= UInt<6>("h20") @[DisplayMultiplexer.scala 23:26]
    coin5full[2] <= UInt<7>("h40") @[DisplayMultiplexer.scala 23:26]
    coin5full[3] <= UInt<1>("h0") @[DisplayMultiplexer.scala 23:26]
    wire empty : UInt<1>[4] @[DisplayMultiplexer.scala 24:22]
    empty[0] <= UInt<1>("h0") @[DisplayMultiplexer.scala 24:22]
    empty[1] <= UInt<1>("h0") @[DisplayMultiplexer.scala 24:22]
    empty[2] <= UInt<1>("h0") @[DisplayMultiplexer.scala 24:22]
    empty[3] <= UInt<1>("h0") @[DisplayMultiplexer.scala 24:22]
    wire ice : UInt<7>[4] @[DisplayMultiplexer.scala 25:20]
    ice[0] <= UInt<7>("h7f") @[DisplayMultiplexer.scala 25:20]
    ice[1] <= UInt<7>("h7f") @[DisplayMultiplexer.scala 25:20]
    ice[2] <= UInt<7>("h7f") @[DisplayMultiplexer.scala 25:20]
    ice[3] <= UInt<7>("h7f") @[DisplayMultiplexer.scala 25:20]
    inst sevenSegDec0 of SevenSegDec @[DisplayMultiplexer.scala 28:28]
    sevenSegDec0.clock <= clock
    sevenSegDec0.reset <= reset
    inst sevenSegDec1 of SevenSegDec_1 @[DisplayMultiplexer.scala 29:28]
    sevenSegDec1.clock <= clock
    sevenSegDec1.reset <= reset
    inst sevenSegDec2 of SevenSegDec_2 @[DisplayMultiplexer.scala 30:28]
    sevenSegDec2.clock <= clock
    sevenSegDec2.reset <= reset
    inst sevenSegDec3 of SevenSegDec_3 @[DisplayMultiplexer.scala 31:28]
    sevenSegDec3.clock <= clock
    sevenSegDec3.reset <= reset
    reg cntReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DisplayMultiplexer.scala 34:23]
    reg outReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h1")) @[DisplayMultiplexer.scala 35:23]
    reg outReg2 : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[DisplayMultiplexer.scala 36:24]
    node _cntReg_T = add(cntReg, UInt<1>("h1")) @[DisplayMultiplexer.scala 40:20]
    node _cntReg_T_1 = tail(_cntReg_T, 1) @[DisplayMultiplexer.scala 40:20]
    cntReg <= _cntReg_T_1 @[DisplayMultiplexer.scala 40:10]
    node _T = eq(cntReg, UInt<10>("h3e8")) @[DisplayMultiplexer.scala 41:15]
    when _T : @[DisplayMultiplexer.scala 41:28]
      cntReg <= UInt<1>("h0") @[DisplayMultiplexer.scala 42:12]
      node _outReg_T = bits(outReg, 0, 0) @[DisplayMultiplexer.scala 43:21]
      node _outReg_T_1 = bits(outReg, 3, 1) @[DisplayMultiplexer.scala 43:34]
      node _outReg_T_2 = cat(_outReg_T, _outReg_T_1) @[DisplayMultiplexer.scala 43:25]
      outReg <= _outReg_T_2 @[DisplayMultiplexer.scala 43:12]
      outReg2 <= io.hex @[DisplayMultiplexer.scala 44:13]
    select <= outReg @[DisplayMultiplexer.scala 46:10]
    node _sevenSegDec0_io_in_T = bits(outReg2, 3, 0) @[DisplayMultiplexer.scala 49:32]
    sevenSegDec0.io.in <= _sevenSegDec0_io_in_T @[DisplayMultiplexer.scala 49:22]
    node _sevenSegDec1_io_in_T = bits(outReg2, 7, 4) @[DisplayMultiplexer.scala 50:32]
    sevenSegDec1.io.in <= _sevenSegDec1_io_in_T @[DisplayMultiplexer.scala 50:22]
    node _sevenSegDec2_io_in_T = bits(outReg2, 11, 8) @[DisplayMultiplexer.scala 51:32]
    sevenSegDec2.io.in <= _sevenSegDec2_io_in_T @[DisplayMultiplexer.scala 51:22]
    node _sevenSegDec3_io_in_T = bits(outReg2, 15, 12) @[DisplayMultiplexer.scala 52:32]
    sevenSegDec3.io.in <= _sevenSegDec3_io_in_T @[DisplayMultiplexer.scala 52:22]
    node _T_1 = eq(UInt<1>("h1"), select) @[DisplayMultiplexer.scala 55:18]
    when _T_1 : @[DisplayMultiplexer.scala 55:18]
      when io.iced : @[DisplayMultiplexer.scala 58:21]
        sevSeg <= ice[3] @[DisplayMultiplexer.scala 59:16]
      else :
        when io.c2Full : @[DisplayMultiplexer.scala 60:28]
          sevSeg <= coin2full[3] @[DisplayMultiplexer.scala 61:16]
        else :
          when io.c5Full : @[DisplayMultiplexer.scala 62:28]
            sevSeg <= coin5full[3] @[DisplayMultiplexer.scala 63:16]
          else :
            when io.noCans : @[DisplayMultiplexer.scala 64:29]
              sevSeg <= empty[3] @[DisplayMultiplexer.scala 65:16]
            else :
              sevSeg <= sevenSegDec0.io.out @[DisplayMultiplexer.scala 67:16]
    else :
      node _T_2 = eq(UInt<2>("h2"), select) @[DisplayMultiplexer.scala 55:18]
      when _T_2 : @[DisplayMultiplexer.scala 55:18]
        when io.iced : @[DisplayMultiplexer.scala 71:21]
          sevSeg <= ice[2] @[DisplayMultiplexer.scala 72:16]
        else :
          when io.c2Full : @[DisplayMultiplexer.scala 73:29]
            sevSeg <= coin2full[2] @[DisplayMultiplexer.scala 74:16]
          else :
            when io.c5Full : @[DisplayMultiplexer.scala 75:29]
              sevSeg <= coin5full[2] @[DisplayMultiplexer.scala 76:16]
            else :
              when io.noCans : @[DisplayMultiplexer.scala 77:29]
                sevSeg <= empty[2] @[DisplayMultiplexer.scala 78:16]
              else :
                sevSeg <= sevenSegDec1.io.out @[DisplayMultiplexer.scala 80:16]
      else :
        node _T_3 = eq(UInt<3>("h4"), select) @[DisplayMultiplexer.scala 55:18]
        when _T_3 : @[DisplayMultiplexer.scala 55:18]
          when io.iced : @[DisplayMultiplexer.scala 84:21]
            sevSeg <= ice[1] @[DisplayMultiplexer.scala 85:16]
          else :
            when io.c2Full : @[DisplayMultiplexer.scala 86:29]
              sevSeg <= coin2full[1] @[DisplayMultiplexer.scala 87:16]
            else :
              when io.c5Full : @[DisplayMultiplexer.scala 88:29]
                sevSeg <= coin5full[1] @[DisplayMultiplexer.scala 89:16]
              else :
                when io.noCans : @[DisplayMultiplexer.scala 90:29]
                  sevSeg <= empty[1] @[DisplayMultiplexer.scala 91:16]
                else :
                  sevSeg <= sevenSegDec2.io.out @[DisplayMultiplexer.scala 93:16]
        else :
          node _T_4 = eq(UInt<4>("h8"), select) @[DisplayMultiplexer.scala 55:18]
          when _T_4 : @[DisplayMultiplexer.scala 55:18]
            when io.iced : @[DisplayMultiplexer.scala 97:21]
              sevSeg <= ice[0] @[DisplayMultiplexer.scala 98:16]
            else :
              when io.c2Full : @[DisplayMultiplexer.scala 99:29]
                sevSeg <= coin2full[0] @[DisplayMultiplexer.scala 100:16]
              else :
                when io.c5Full : @[DisplayMultiplexer.scala 101:29]
                  sevSeg <= coin5full[0] @[DisplayMultiplexer.scala 102:16]
                else :
                  when io.noCans : @[DisplayMultiplexer.scala 103:29]
                    sevSeg <= empty[0] @[DisplayMultiplexer.scala 104:16]
                  else :
                    sevSeg <= sevenSegDec3.io.out @[DisplayMultiplexer.scala 106:16]
    node _io_seg_T = not(sevSeg) @[DisplayMultiplexer.scala 112:13]
    io.seg <= _io_seg_T @[DisplayMultiplexer.scala 112:10]
    node _io_an_T = not(select) @[DisplayMultiplexer.scala 113:12]
    io.an <= _io_an_T @[DisplayMultiplexer.scala 113:9]

  module connection :
    input clock : Clock
    input reset : UInt<1>
    output io : { seg : UInt<7>, an : UInt<4>, flip sw : UInt<4>, led : UInt<4>}

    inst CPU of cpu @[connection.scala 14:21]
    CPU.clock <= clock
    CPU.reset <= reset
    inst SevenSeg of DisplayMultiplexer @[connection.scala 15:26]
    SevenSeg.clock <= clock
    SevenSeg.reset <= reset
    node _SevenSeg_io_hex_T = bits(io.sw, 0, 0) @[connection.scala 17:33]
    node _SevenSeg_io_hex_T_1 = bits(CPU.io.sevSegNum, 15, 0) @[connection.scala 17:53]
    node _SevenSeg_io_hex_T_2 = bits(io.sw, 1, 1) @[connection.scala 17:69]
    node _SevenSeg_io_hex_T_3 = bits(CPU.io.sevSegNum, 31, 16) @[connection.scala 17:89]
    node _SevenSeg_io_hex_T_4 = mux(_SevenSeg_io_hex_T_2, _SevenSeg_io_hex_T_3, UInt<14>("h3111")) @[connection.scala 17:63]
    node _SevenSeg_io_hex_T_5 = mux(_SevenSeg_io_hex_T, _SevenSeg_io_hex_T_1, _SevenSeg_io_hex_T_4) @[connection.scala 17:27]
    SevenSeg.io.hex <= _SevenSeg_io_hex_T_5 @[connection.scala 17:21]
    SevenSeg.io.c2Full <= UInt<1>("h0") @[connection.scala 19:24]
    node _SevenSeg_io_c5Full_T = bits(io.sw, 1, 1) @[connection.scala 20:32]
    node _SevenSeg_io_c5Full_T_1 = bits(io.sw, 0, 0) @[connection.scala 20:44]
    node _SevenSeg_io_c5Full_T_2 = and(_SevenSeg_io_c5Full_T, _SevenSeg_io_c5Full_T_1) @[connection.scala 20:36]
    SevenSeg.io.c5Full <= _SevenSeg_io_c5Full_T_2 @[connection.scala 20:24]
    node _SevenSeg_io_noCans_T = bits(io.sw, 2, 2) @[connection.scala 21:32]
    SevenSeg.io.noCans <= _SevenSeg_io_noCans_T @[connection.scala 21:24]
    node _SevenSeg_io_iced_T = bits(io.sw, 3, 3) @[connection.scala 22:30]
    SevenSeg.io.iced <= _SevenSeg_io_iced_T @[connection.scala 22:22]
    io.seg <= SevenSeg.io.seg @[connection.scala 24:12]
    io.an <= SevenSeg.io.an @[connection.scala 25:11]
    io.led <= io.sw @[connection.scala 27:12]

